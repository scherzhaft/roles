#!/bin/bash


##set -x
ARGS="${*}"
##echo "${ARGS}" >/tmp/ARGS
##exit

ROLE=`echo "${ARGS}"|awk -F\. {'print $1'}|grep -v "^[0-9]*_[0-9]*$"`
test "X${ROLE}" = "X" && exit 6
SUBROLEACTION=`echo "${ARGS}"|perl -p -e "s|\%.*$||g"|awk -F\. {'print $2'}|grep -v "^[0-9]*_[0-9]*$"|grep -v ".=."`
ACTIONATTR=`echo "${ARGS}"|perl -p -e "s|\%.*$||g"|awk -F\. {'print $3'}|grep -v "^[0-9]*_[0-9]*$"|grep -v ".=."`
PKGARGS=`echo "${ARGS}"|perl -p -e "s|\%.*$||g"|perl -p -e "s/\./\n/g"|grep ".=."`
export SCRIPTDIR=`dirname $0`
ROLEDIR=`dirname ${SCRIPTDIR}`
PATCHES=`cat ${SCRIPTDIR}/PATCHES 2>/dev/null`
PKGS=`cat ${SCRIPTDIR}/PKGS 2>/dev/null|perl -p -e "s/\n/,/g"`
RESPONCE=`echo "${PKGS}"|head -1|sed -e "s|,||g"`
##exit 1

/usr/sbin/slack-get global-slack
/usr/sbin/slack-get global-solaris-adminfunctions

. /etc/default/SYSconstants
export PATH="${SCRIPTDIR}:${PATH}"

mkdir -p "${ROLEDIR}/files" >/dev/null 2>&1
slack --no-sync --no-scripts -r "${ROLEDIR}/files" "${ROLE}.${__OSNAME}"


####chmod 400 ${SCRIPTDIR}/%FETCHCRED%
####chown root:root ${SCRIPTDIR}/%FETCHCRED%
NAME="${ROLE}Tracker"
DESC="DO NOT REMOVE THIS TRACKER PKG.  Ran ${ROLE} role."
if [ "X${__OSNAME}" = "XSunOS" ] ; then
  test -d /var/sadm/pkg/TRK${NAME}
  TRACKER="$?"
  if [ "X${PKGARGS}" = "X" -a -d "${ROLEDIR}/files/%BASEDIR%" ] ; then
    PKGBASE=`pkgparam ${RESPONCE} BASEDIR 2>/dev/null`
    if [ "X${PKGBASE}" != "X" ] ; then
      PKGARGS="BASEDIR=${PKGBASE}"
    fi
  fi
else
  rpm -q TRK${NAME} >/dev/null
  TRACKER="$?"
fi


main()
{
case "${SUBROLEACTION}${ACTIONATTR}" in
  "")
    echo
    echo "##################################"
    echo "##  Insufficient arguments (0)  ##"
    echo "##################################"
    echo
    roleusage
    return 2
  ;;    

  run|report|stig)
    mkusers
    sudoers.patch
    sysupdate.prepare
    rm -f /opt/unix_ops/STIG/bin/*
    return 0
  ;;

  *)
    ##set -x
    eval "${SUBROLEACTION}${ACTIONATTR}"
    if [ "X${?}" != "X" -a "X${?}" != "X0" ] ; then
      echo
      echo "########################"
      echo "##  INVALID ARGUMENT  ##"
      echo "########################"
      echo
      roleusage
      return 7
    fi
    return 9
esac
}


appremove()
{
echo
echo "############"
echo "# REMOVING #"
echo "############"
echo "${PKGS}"
set -x
sleep 4
rm_pkgs ${PKGS}
set +x
echo "###########"
echo "# REMOVED #"
echo "###########"

}


cleanexit()
{
echo
echo cleanexit
if [ "X${ROLEDIR}" != "X" ] ; then
  ##set -x
  FILEPATHS=`ls -d ${ROLEDIR}/files ${ROLEDIR}/files.* ${ROLEDIR}/scripts 2>/dev/null`
  test "X${FILEPATHS}" != "X" && rm -rf ${FILEPATHS} 2>/dev/null
  test "X${FILEPATHS}" != "X" && mkdir -p ${FILEPATHS} 2>/dev/null
  ##set +x
else
  exit $1
fi
return 0
}



roleusage()
{
if [ "X${ROLE}" != "X" ] ; then
  echo
  echo
  echo "################################################################################"
  echo "################################################################################" 
  echo "##  usage: ${ROLE}.run                ## patch/update the system      "
  echo "##  usage: ${ROLE}.stig               ## run all the stig/hardening scripts"
  echo "################################################################################"
  echo "################################################################################" 
  echo
fi
}


main || cleanexit $?

